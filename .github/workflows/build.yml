# Modified from (GPL):
# https://github.com/travisgoodspeed/maskromtool/blob/master/.github/workflows/build.yml

name: Build app

on:
  push:
    branches-ignore:
      - 'pre-commit-ci-update-config'
    tags:
      - '*'
    paths-ignore:
      - '**.md'
      - '**.ts'

permissions:
  contents: write
  id-token: write
  attestations: write

jobs:
  test:
    name: Test
    if: |
      startsWith(github.ref, 'refs/tags/') ||
      !startsWith(github.event.head_commit.message, 'release')
    # We keep the same OS version and Qt modules as the AppImage build to reuse cache
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y libgmock-dev libgl1-mesa-dev

    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: 6.9.1
        dir: ..
        modules: qtmultimedia
        setup-python: false
        install-deps: false
        cache: true

    - name: Run Tests
      env:
        QT_QPA_PLATFORM: offscreen
      run: |
        mkdir build
        cd build
        cmake -DTESTING=ON  ..
        cmake --build . --parallel --target check

  build-windows:
    name: Build (Windows)
    needs: test
    strategy:
      matrix:
        os: [windows-latest, windows-11-arm]
        include:
        - os: windows-latest
          app-name: sane-break-windows
        - os: windows-11-arm
          app-name: sane-break-windows-arm
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: AllanChain/install-qt-static@v6.9
    - uses: ilammy/msvc-dev-cmd@v1

    - name: Install NSIS
      run: Install-ChocoPackage nsis -ArgumentList "--version", "3.11"

    - name: Build Project
      run: |
        mkdir build
        cd build
        qt-cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DSANE_BUILD_NSIS=1 ..
        cmake --build . --parallel --config Release --target msix
        cpack

    - name: Packing
      run: |
        mkdir release
        mv build\Release\sane-break.exe .
        7z a release/${{ matrix.app-name }}.zip sane-break.exe LICENSE
        mv build\sane-break-windows.exe release\${{ matrix.app-name }}

    - name: Upload MSIX
      uses: actions/upload-artifact@v4
      with:
        name: _${{ matrix.app-name }}
        path: build/sane-break-windows.msix

    - name: Attestation
      uses: actions/attest-build-provenance@v2
      with:
        subject-path: ./release/*

    - name: Create Artifact
      uses: actions/upload-artifact@v4
      with:
         name: ${{ matrix.app-name }}
         path: ./release/*

  build-macos:
    name: Build (macOS, ${{ matrix.arch }})
    needs: test
    runs-on: macos-15
    strategy:
      fail-fast: false # continue other jobs if one failed
      matrix:
        arch: [x86_64, arm64]
    steps:
    - uses: actions/checkout@v4
    - uses: AllanChain/install-qt-static@v6.9

    - name: Build Project
      run: |
        mkdir build
        cd build
        qt-cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} ..
        cmake --build . --parallel

    - uses: apple-actions/import-codesign-certs@v3
      id: certificate
      with:
        p12-file-base64: ${{ secrets.PROD_MACOS_CERTIFICATE }}
        p12-password: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}

    # https://federicoterzi.com/blog/automatic-code-signing-and-notarization-for-macos-apps-using-github-actions/
    - name: Codesign app
      env:
        MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
      run: codesign --force -s "$MACOS_CERTIFICATE_NAME" --options runtime "build/sane-break.app" -v

    - name: Notarize app
      env:
        PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
        PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
        PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
      run: |
        echo "Create keychain profile"
        xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"

        echo "Creating temp notarization archive"
        ditto -c -k --keepParent "build/sane-break.app" "notarization.zip"

        echo "Notarize app"
        xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait

        echo "Attach staple"
        xcrun stapler staple "build/sane-break.app"

    - name: Packing
      run: |
        mv build/sane-break.app "build/Sane Break.app"
        mkdir release
        brew install create-dmg
        create-dmg \
          --volname "Sane Break" \
          --hide-extension "Sane Break.app" \
          --window-size 600 450 \
          --icon-size 94 \
          --icon "Sane Break" 141 249 \
          --app-drop-link 458 249 \
          --eula LICENSE \
          "release/sane-break-macos-${{ matrix.arch }}.dmg" \
          "build/Sane Break.app"

    - name: Attestation
      uses: actions/attest-build-provenance@v2
      with:
        subject-path: ./release/*

    - name: Create Artifact
      uses: actions/upload-artifact@v4
      with:
         name: "sane-break-macos-${{ matrix.arch }}"
         path: ./release/*

  build-debian:
    name: Build (Linux, ${{ matrix.tag }})
    needs: test
    strategy:
      fail-fast: false # continue other jobs if one failed
      matrix:
        tag: [bookworm, trixie]
    runs-on: ubuntu-latest
    container:
      image: debian:${{ matrix.tag }}
    env:
      LANG: C.UTF-8
      LC_ALL: C.UTF-8
      LANGUAGE: C.UTF-8
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y nodejs g++ cmake qt6-base-dev qt6-multimedia-dev \
          qt6-tools-dev qt6-wayland-dev qt6-wayland qt6-base-private-dev

    - name: Install additional dependencies
      if: matrix.tag == 'trixie'
      run: apt-get install -y liblayershellqtinterface-dev

    - name: Build Project
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DSANE_MAKE_DEB=1 ..
        cmake --build . --parallel

    - name: Packing
      run: |
        mkdir release
        cd build
        cpack
        mv sane-break.deb ../release/sane-break-${{ matrix.tag }}.deb

    - name: Attestation
      uses: actions/attest-build-provenance@v2
      with:
        subject-path: ./release/*

    - name: Create Artifact
      uses: actions/upload-artifact@v4
      with:
         name: "sane-break-${{ matrix.tag }}"
         path: ./release/*

  build-appimage:
    name: Build (Linux, AppImage)
    needs: test
    # It's recommended to support old Ubuntu LTS for AppImages.
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4

    - name: Install Wayland & X11
      run: |
        sudo apt update
        sudo apt install -y libwayland-dev wayland-protocols libxss-dev

    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: 6.9.1
        dir: ..
        modules: qtmultimedia
        setup-python: false
        cache: true

    - name: Install extra-cmake-modules
      working-directory: ..
      run: |
        git clone https://github.com/KDE/extra-cmake-modules --branch v6.16.0
        cd extra-cmake-modules
        cmake .
        cmake --build . --parallel
        sudo cmake --install .

    - name: Install layer-shell-qt
      working-directory: ..
      run: |
        git clone https://github.com/KDE/layer-shell-qt --branch v6.4.3
        cd layer-shell-qt
        cmake -DCMAKE_INSTALL_PREFIX=/usr .
        cmake --build . --parallel
        sudo cmake --install .

    - name: Install linuxdeploy
      working-directory: ..
      run: |
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
        chmod u+x *.AppImage

    - name: Build Project
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=MinSizeRel ..
        cmake --build . --parallel

    - name: Packing
      run: |
        cd build
        cmake --install . --prefix AppDir/usr
        cp AppDir/usr/share/metainfo/io.github.AllanChain.sane-break.metainfo.xml \
          AppDir/usr/share/metainfo/io.github.AllanChain.sane-break.appdata.xml
        ../../linuxdeploy-x86_64.AppImage --appdir AppDir --output appimage \
          --plugin qt --deploy-deps-only=AppDir/usr/lib/sane-break
        mkdir ../release
        cp Sane_Break-x86_64.AppImage ../release/sane-break.AppImage
      env:
        EXTRA_PLATFORM_PLUGINS: libqwayland-egl.so;libqwayland-generic.so
        EXTRA_QT_MODULES: waylandcompositor

    - name: Attestation
      uses: actions/attest-build-provenance@v2
      with:
        subject-path: ./release/*

    - name: Create Artifact
      uses: actions/upload-artifact@v4
      with:
         name: "sane-break-appimage"
         path: ./release/*

  build-gnome:
    name: Build GNOME shell extension
    needs: test
    if: |
      startsWith(github.ref, 'refs/tags/') ||
      !startsWith(github.event.head_commit.message, 'release')
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Packing
      run: zip -j -r sane-break-gnome-extension packaging/linux/gnome/sane-break@allanchain.github.io

    - name: Create Artifact
      uses: actions/upload-artifact@v4
      with:
         name: "sane-break-gnome-extension"
         path: ./sane-break-gnome-extension.zip

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build-macos, build-windows, build-debian, build-appimage, build-gnome]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          path: release
          merge-multiple: true
      - uses: softprops/action-gh-release@v2
        with:
          files: release/*
          body: |
            ## What's new

            To be written.

            ---

            Installation instructions:

            <details>
            <summary>macOS</summary>

            Download `sane-break-macos-x86_64.dmg` file if you are using Intel mac, or `sane-break-macos-arm64.dmg` if you are using ARM chip. Open and install it. macOS 13 or newer are supported.
            </details>

            <details>
            <summary>Windows</summary>

            x86 version of Windows 10 or newer is supported. Older versions may be supported too.
            - **Portable version:** Download the `sane-break-windows.zip` extract it. Put the `.exe` executable anywhere you like.
            - **Installer verions:** Download the `sane-break-windows.exe` and run it.

            </details>

            <details>
            <summary>Linux</summary>

            For Debian-based distributions, there is a notoriously large number of derivatives, and many of them ship old versions of Qt and do not include the latest `layer-shell-qt`. It is impractical to create `.deb` packages for all of them, so we only provide support for Debian Bookworm and Trixie. (Unfortunately, Ubuntu LTS ships with a very old version of Qt and lacks `layer-shell-qt`.)
            The difference between Bookworm build and Trixie build is the layer shell support. If you are using a Debian-based distro and a Wayland compositor with layer shell protocol support (e.g. KDE Neon), you probably need the Debian Trixie build. Otherwise, the Bookworm build is good to go.
            For GNOME users, make sure to enable the GNOME shell extension with:
            ```bash
            gnome-extensions enable sane-break@allanchain.github.io
            ```

            AppImage version is experimental. It may or may not work on your machine.
            </details>
